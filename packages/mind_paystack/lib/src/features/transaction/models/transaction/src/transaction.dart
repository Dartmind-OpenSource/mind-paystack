import 'package:dart_mappable/dart_mappable.dart';
import 'package:mind_paystack/src/core/models/src/authorization_data.dart';
import 'package:mind_paystack/src/core/models/src/customer.dart';
import 'package:mind_paystack/src/features/transaction/models/transaction/src/timeline_log.dart';
part 'transaction.mapper.dart';

/// Represents a Paystack transaction with comprehensive details about the
/// payment.
///
/// This model contains all the information returned by Paystack's
/// transaction APIs, including payment status, customer information,
/// authorization details, and metadata.
///
/// Example usage:
/// ```dart
/// final transaction = Transaction(
///   id: 123456789,
///   domain: 'test',
///   status: 'success',
///   reference: 'tx_abc123',
///   amount: 50000, // ₦500.00 in kobo
///   createdAt: DateTime.now(),
///   channel: 'card',
///   currency: 'NGN',
/// );
/// ```
@MappableClass()
class Transaction with TransactionMappable {
  /// Creates a new Transaction instance.
  ///
  /// All required fields must be provided: [id], [domain], [status],
  /// [reference], [amount], [createdAt], [channel], and [currency].
  const Transaction({
    required this.id,
    required this.domain,
    required this.status,
    required this.reference,
    required this.amount,
    required this.createdAt,
    required this.channel,
    required this.currency,
    this.receiptNumber,
    this.gatewayResponse,
    this.paidAt,
    this.ipAddress,
    this.metadata,
    this.log,
    this.fees,
    this.feesSplit,
    this.authorization,
    this.customer,
    this.plan,
    this.split,
    this.orderId,
    this.requestedAmount,
    this.posTransactionData,
    this.source,
    this.feesBreakdown,
    this.connect,
    this.transactionDate,
    this.planObject,
    this.subaccount,
  });

  /// Unique identifier for the transaction.
  final int id;

  /// The domain environment where the transaction was created.
  ///
  /// Possible values: `'test'` for sandbox, `'live'` for production.
  final String domain;

  /// Current status of the transaction.
  ///
  /// Common values:
  /// - `'success'` - Payment completed successfully
  /// - `'failed'` - Payment failed
  /// - `'abandoned'` - Customer abandoned payment
  /// - `'reversed'` - Transaction was reversed
  /// - `'ongoing'` - Payment is still in progress
  final String status;

  /// Unique reference code for this transaction.
  ///
  /// This is used to identify and verify transactions.
  /// Can be merchant-generated or auto-generated by Paystack.
  final String reference;

  /// Receipt number generated for this transaction (if available).
  @MappableField(key: 'receipt_number')
  final String? receiptNumber;

  /// Transaction amount in the smallest currency unit.
  /// (kobo for NGN, pesewas for GHS).
  ///
  /// For example: 50000 kobo = ₦500.00
  final int amount;

  /// Response message from the payment gateway.
  ///
  /// Contains additional information about the transaction result,
  /// especially useful for understanding failed transactions.
  @MappableField(key: 'gateway_response')
  final String? gatewayResponse;

  /// Timestamp when the payment was completed (if successful).
  @MappableField(key: 'paid_at')
  final DateTime? paidAt;

  /// Timestamp when the transaction was created.
  @MappableField(key: 'created_at')
  final DateTime createdAt;

  /// Payment channel used for this transaction.
  ///
  /// Common values: `'card'`, `'bank'`, `'ussd'`, `'qr'`,
  /// `'mobile_money'`, `'bank_transfer'`.
  final String channel;

  /// Currency code for this transaction.
  ///
  /// Examples: `'NGN'` (Nigerian Naira), `'GHS'` (Ghanaian Cedi),
  /// `'USD'` (US Dollar).
  final String currency;

  /// IP address of the customer when the transaction was initiated.
  @MappableField(key: 'ip_address')
  final String? ipAddress;

  /// Custom metadata attached to the transaction.
  ///
  /// This can contain any additional information you want to store
  /// with the transaction, such as order details, customer preferences,
  /// or internal tracking data.
  final dynamic metadata;

  /// Timeline log containing the transaction's processing history.
  final TimelineLog? log;

  /// Transaction fees charged by Paystack (in smallest currency unit).
  final int? fees;

  /// Breakdown of how transaction fees are split among different parties.
  @MappableField(key: 'fees_split')
  final Map<String, dynamic>? feesSplit;

  /// Authorization details for card transactions.
  ///
  /// Contains information about the card used and authorization codes
  /// that can be used for future recurring charges.
  final AuthorizationData? authorization;

  /// Customer information associated with this transaction.
  final Customer? customer;

  /// Plan code if this transaction is part of a subscription plan.
  final String? plan;

  /// Split payment configuration for this transaction.
  ///
  /// Used when transaction amount should be split among multiple accounts.
  final Map<String, dynamic>? split;

  /// Merchant's order ID for internal tracking.
  @MappableField(key: 'order_id')
  final String? orderId;

  /// Original amount requested before any modifications.
  ///
  /// This may differ from [amount] if the transaction was partially processed
  /// or if there were currency conversions.
  @MappableField(key: 'requested_amount')
  final int? requestedAmount;

  /// Additional data for Point of Sale transactions.
  @MappableField(key: 'pos_transaction_data')
  final Map<String, dynamic>? posTransactionData;

  /// Source information about how this transaction was initiated.
  ///
  /// This field is kept flexible as it can contain various types of source data
  /// depending on the transaction origin.
  final dynamic source;

  /// Detailed breakdown of all fees charged for this transaction.
  @MappableField(key: 'fees_breakdown')
  final dynamic feesBreakdown;

  /// Information about connected accounts or marketplace transactions.
  final dynamic connect;

  /// Alternative timestamp for the transaction (may differ from [createdAt]).
  @MappableField(key: 'transaction_date')
  final DateTime? transactionDate;

  /// Full plan object details if this transaction is associated
  /// with a subscription.
  @MappableField(key: 'plan_object')
  final Map<String, dynamic>? planObject;

  /// Subaccount details if this transaction involves a subaccount.
  ///
  /// Contains information about the subaccount that should receive
  /// a portion of this transaction's amount.
  final Map<String, dynamic>? subaccount;
}
