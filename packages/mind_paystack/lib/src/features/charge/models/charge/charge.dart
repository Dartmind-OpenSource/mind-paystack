import 'package:dart_mappable/dart_mappable.dart';
import 'package:mind_paystack/src/core/models/src/authorization_data.dart';
import 'package:mind_paystack/src/core/models/src/customer.dart';
import 'package:mind_paystack/src/core/models/src/fees_breakdown.dart';
import 'package:mind_paystack/src/core/models/src/plan.dart';
import 'package:mind_paystack/src/core/models/src/split.dart';
import 'package:mind_paystack/src/core/models/src/sub_account.dart';

part 'charge.mapper.dart';

/// Complete charge transaction data returned by the Paystack API.
///
/// This class represents a fully processed charge transaction containing
/// all the details about a payment, including transaction status, customer
/// information, authorization details, fees breakdown, and metadata.
///
/// A charge represents the complete lifecycle of a payment transaction:
/// - Initial creation with customer and payment details
/// - Processing through various authentication steps
/// - Final settlement with fee calculations and breakdowns
/// - Associated customer and authorization data for future use
///
/// The charge data is typically returned from:
/// - Creating a new charge transaction
/// - Checking pending charge status
/// - Transaction verification and queries
/// - Webhook notifications for transaction updates
///
/// Key information included:
/// - Transaction identification (ID, reference)
/// - Payment details (amount, currency, channel)
/// - Customer and authorization data
/// - Fees and split configurations
/// - Transaction timestamps and status
///
/// Example usage:
/// ```dart
/// // From API response
/// final charge = ChargeData.fromMap(apiResponse);
///
/// // Check transaction status
/// if (charge.status == 'success') {
///   print('Payment successful: ${charge.amount} ${charge.currency}');
///   print('Reference: ${charge.reference}');
/// }
///
/// // Access customer information
/// print('Customer: ${charge.customer.email}');
///
/// // Check authorization for future payments
/// if (charge.authorization.reusable) {
///   // Save authorization code for future transactions
///   final authCode = charge.authorization.authorizationCode;
/// }
/// ```
@MappableClass()
class ChargeData with ChargeDataMappable {
  /// Creates a charge data instance with complete transaction information.
  ///
  /// This constructor maps all fields from the Paystack API response to
  /// create a comprehensive representation of the charge transaction.
  ///
  /// Required parameters include core transaction identifiers and amounts,
  /// while optional parameters provide additional context like fees,
  /// splits, and metadata depending on the payment configuration.
  const ChargeData({
    @MappableField(key: 'created_at') required this.createdAt,
    required this.channel,
    required this.currency,
    required this.id,
    required this.domain,
    required this.status,
    required this.reference,
    required this.amount,
    @MappableField(key: 'gateway_response') required this.gatewayResponse,
    @MappableField(key: 'requested_amount') required this.requestedAmount,
    @MappableField(key: 'transaction_date') required this.transactionDate,
    required this.authorization,
    required this.customer,
    this.message,
    @MappableField(key: 'paid_at') this.paidAt,
    @MappableField(key: 'ip_address') this.ipAddress,
    this.metadata,
    this.log,
    this.fees,
    @MappableField(key: 'fees_split') this.feesSplit,
    this.plan,
    @MappableField(key: 'split') this.splitDetail,
    @MappableField(key: 'order_id') this.orderId,
    @MappableField(key: 'paidAt') this.paidAtAlt,
    @MappableField(key: 'createdAt') this.createdAtAlt,
    @MappableField(key: 'pos_transaction_data') this.posTransactionData,
    this.source,
    @MappableField(key: 'fees_breakdown') this.feesBreakdown,
    @MappableField(key: 'plan_object') this.planObject,
    @MappableField(key: 'subaccount') this.subaccountDetail,
  });

  /// Unique numeric identifier for this charge transaction.
  ///
  /// This ID is generated by Paystack and serves as the primary
  /// identifier for the transaction in their system.
  final int id;

  /// Domain environment where the charge was processed.
  ///
  /// Indicates whether this charge was processed in the test
  /// or live environment (e.g., 'test', 'live').
  final String domain;

  /// Current status of the charge transaction.
  ///
  /// Common values:
  /// - 'success': Payment completed successfully
  /// - 'failed': Payment failed
  /// - 'pending': Payment requires additional action
  /// - 'abandoned': Customer abandoned the payment flow
  final String status;

  /// Unique reference identifier for this transaction.
  ///
  /// This can be either merchant-generated or Paystack-generated
  /// and is used to track and identify the transaction uniquely.
  final String reference;

  /// Final charged amount in the smallest currency unit.
  ///
  /// For NGN, this is in kobo; for USD, in cents.
  /// May differ from requestedAmount due to fees or adjustments.
  final int amount;

  /// Additional message or description for the charge.
  ///
  /// Often contains success confirmations, error descriptions,
  /// or additional context about the transaction status.
  final String? message;

  /// Response message from the payment gateway.
  ///
  /// Contains the actual response from the bank or payment
  /// processor, providing detailed information about the
  /// transaction outcome.
  final String gatewayResponse;

  /// Timestamp when the payment was successfully completed.
  ///
  /// Only populated for successful transactions. Null for
  /// failed or pending transactions.
  final DateTime? paidAt;

  /// Timestamp when the charge transaction was initially created.
  ///
  /// Marks the beginning of the payment flow regardless of
  /// the final transaction outcome.
  final DateTime createdAt;

  /// Payment channel used for this transaction.
  ///
  /// Examples: 'card', 'bank', 'ussd', 'bank_transfer',
  /// 'mobile_money', 'qr'
  final String channel;

  /// Currency code for the transaction amount.
  ///
  /// ISO 4217 currency codes like 'NGN', 'USD', 'GHS', etc.
  final String currency;

  /// IP address of the customer who initiated the payment.
  ///
  /// Used for fraud detection and geographic analysis.
  /// May be null if IP tracking is disabled or unavailable.
  final String? ipAddress;

  /// Custom metadata attached to the transaction.
  ///
  /// JSON string containing additional data provided during
  /// charge creation for custom tracking and processing.
  final String? metadata;

  /// Internal transaction log data from Paystack.
  ///
  /// Contains processing details and is not well documented.
  /// Type may be refined when official specifications are available.
  final dynamic log;

  /// Transaction fees charged by Paystack in smallest currency unit.
  ///
  /// Only populated for successful transactions. Includes
  /// Paystack's processing fees and any applicable taxes.
  final int? fees;

  /// Breakdown of how fees are split among parties.
  ///
  /// Used in marketplace scenarios with subaccounts.
  /// Structure not officially documented yet.
  final dynamic feesSplit;

  /// Authorization details for the payment method used.
  ///
  /// Contains card or bank account authorization information
  /// that can be reused for future transactions if marked as reusable.
  final AuthorizationData authorization;

  /// Complete customer information associated with this charge.
  ///
  /// Includes customer details like email, name, and any
  /// additional data collected during the payment process.
  final Customer customer;

  /// Subscription plan associated with this charge, if applicable.
  ///
  /// Only populated when the charge is part of a subscription
  /// or recurring payment plan.
  final Plan? plan;

  /// Payment split configuration details.
  ///
  /// Contains information about how the payment amount was
  /// distributed among different parties in marketplace scenarios.
  final Split? splitDetail;

  /// External order identifier provided by the merchant.
  ///
  /// Links the Paystack transaction to the merchant's internal
  /// order management system.
  final String? orderId;

  /// Alternative timestamp for when payment was completed.
  ///
  /// Backup field that may contain payment completion time
  /// in different timezone or format.
  final DateTime? paidAtAlt;

  /// Alternative timestamp for transaction creation.
  ///
  /// Backup field that may contain creation time in different
  /// timezone or format.
  final DateTime? createdAtAlt;

  /// Original amount requested before any adjustments.
  ///
  /// The amount initially requested for the charge in smallest
  /// currency unit, before fees or other modifications.
  final int requestedAmount;

  /// Point-of-sale transaction data, if applicable.
  ///
  /// Contains additional data for POS transactions.
  /// Structure not officially documented.
  final dynamic posTransactionData;

  /// Source information for the transaction.
  ///
  /// Internal field containing transaction source details.
  /// Not documented in official API specifications.
  final dynamic source;

  /// Detailed breakdown of all fees charged for this transaction.
  ///
  /// Provides granular information about Paystack fees,
  /// gateway fees, and any other charges applied.
  final FeesBreakdown? feesBreakdown;

  /// Date when the transaction was processed.
  ///
  /// May differ from createdAt and represents the actual
  /// processing date of the payment.
  final DateTime transactionDate;

  /// Detailed plan object for subscription-related charges.
  ///
  /// Extended plan information when the charge is associated
  /// with a subscription. May be empty object from API.
  final Plan? planObject;

  /// Complete subaccount details for split payments.
  ///
  /// Full subaccount information when payment splitting
  /// is configured for marketplace scenarios.
  final Subaccount? subaccountDetail;
}
